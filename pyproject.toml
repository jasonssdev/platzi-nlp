[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "platzi-nlp"
version = "0.1.0"
description = "A Natural Language Processing project for Platzi course"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "jasonssdev", email = "jasonssdev@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.13"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "openpyxl>=3.1.0",
    "xlrd>=2.0.0",
    "python-dotenv>=1.0.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
nlp = [
    "nltk>=3.8.0",
    "spacy>=3.7.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "datasets>=2.14.0",
    "wordcloud>=1.9.0",
    "textblob>=0.17.0",
]
analysis = [
    "plotly>=5.15.0",
    "bokeh>=3.2.0",
    "dash>=2.11.0",
    "streamlit>=1.25.0",
]

[project.urls]
Homepage = "https://github.com/jasonssdev/platzi-nlp"
Repository = "https://github.com/jasonssdev/platzi-nlp.git"
Issues = "https://github.com/jasonssdev/platzi-nlp/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "utils*"]
exclude = ["tests*", "notebooks*", "data*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | data
  | notebooks
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "utils"]
skip_glob = ["data/*", "notebooks/*"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["data/", "notebooks/", "references/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
]
filterwarnings = ["ignore::UserWarning", "ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["src", "utils"]
omit = ["*/tests/*", "*/test_*", "notebooks/*", "data/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
